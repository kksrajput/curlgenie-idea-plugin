# cURLGenie üßû‚Äç‚ôÇÔ∏è

**cURLGenie** is an IntelliJ IDEA plugin that generates `cURL` commands from your **Spring Boot controller methods**.

Paste a controller method (and optional class definitions), and instantly get a ready-to-run `cURL` command ‚Äî with support for:
- `@RequestParam`, `@PathVariable`, `@RequestBody`, `@ModelAttribute`, `@RequestHeader`
- JSON / XML body generation
- DTOs, nested classes, interfaces, inheritance
- Map bodies (`Map<String, Object>`)
- Validation annotations
- Header and query param inference

---

## ‚ú® Features

- üîç Detects Spring REST annotations like `@GetMapping`, `@PostMapping`, `@RequestMapping`
- üß† Parses DTOs to generate body content (JSON or XML)
- üßæ Supports nested classes, inheritance, interfaces
- üí° Smart handling of headers, query/path/body params
- üß™ JUnit-tested for common and edge cases

---

## üì¶ Installation

1. Open IntelliJ IDEA
2. Go to `Settings > Plugins`
3. Click `Marketplace` and search for `cURLGenie`
4. Install the plugin
5. Restart IntelliJ

---

## üöÄ How to Use

1. Open any Java class file with Spring controller methods.
2. Select `Tools > Generate cURL from Spring Method` from the main menu.
3. Paste your Spring controller method when prompted.
4. (Optional) Paste related class definitions (DTOs) when prompted.
5. Click OK ‚Äî your `cURL` command is generated instantly!

---

## üß™ Example Scenarios

### ‚úÖ Simple GET Request

```java
@GetMapping("/hello")
public String sayHello(@RequestParam String name) {}
‚û°Ô∏è Generates:


curl -X GET \
"http://localhost:8080/hello?name=val"
‚úÖ POST with Nested JSON
java

@PostMapping("/users")
public void create(@RequestBody User u) {}
java

public class User {
  private String name;
  private int age;
  private Address address;
}
public class Address {
  private String city;
}
‚û°Ô∏è Generates:


curl -X POST \
"http://localhost:8080/users" \
  -H "Content-Type: application/json" \
  -d '{"name":"example","age":1,"address":{"city":"example"}}'
‚úÖ PUT with ModelAttribute
java

@PutMapping("/update")
public void update(@ModelAttribute Req r) {}
java

public class Req {
  private String id;
  private String val;
}
‚û°Ô∏è Generates:


curl -X PUT \
"http://localhost:8080/update?id=val&val=val"
‚úÖ Header Detection
java

@GetMapping("/auth")
public void a(@RequestHeader("Authorization") String tok) {}
‚û°Ô∏è Generates:


curl -X GET \
"http://localhost:8080/auth" \
  -H "Authorization: val"
‚úÖ Map Body
java

@PostMapping("/dynamic")
public void d(@RequestBody Map<String,Object> m) {}
‚û°Ô∏è Generates:


curl -X POST \
"http://localhost:8080/dynamic" \
  -H "Content-Type: application/json" \
  -d '{"key":"value"}'
‚úÖ XML Body
java

@PostMapping(value="/xml", consumes="application/xml")
public void x(@RequestBody X u) {}
java

public class X {
  private String name;
}
‚û°Ô∏è Generates:


curl -X POST \
"http://localhost:8080/xml" \
  -H "Content-Type: application/xml" \
  -d '<X><name>example</name></X>'
‚úÖ Inheritance Support
java

@PostMapping("/create")
public void create(@RequestBody ExtendedUser user) {}
java

public class BaseUser {
  private String email;
}
public class ExtendedUser extends BaseUser {
  private String username;
}
‚û°Ô∏è Generates:

curl -X POST \
"http://localhost:8080/create" \
  -H "Content-Type: application/json" \
  -d '{"email":"example","username":"example"}'
üßæ License
MIT License. See LICENSE for details.

ü§ù Contributing
Feel free to fork this repo, submit issues, or create pull requests.

GitHub: https://github.com/kksrajput/curlgenie-idea-plugin

üôã FAQ
Q: What Spring annotations are supported?
A: @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @RequestMapping, @RequestParam, @PathVariable, @RequestBody, @ModelAttribute, @RequestHeader.

Q: Can I use this for complex DTOs?
A: Yes! It supports inheritance, interfaces, and nested classes.

Enjoy lightning-fast cURL generation in IntelliJ with cURLGenie ‚ö°Ô∏è
